# Autogenerated from a Treetop grammar. Edits may be lost.


module Verilog
  include Treetop::Runtime

  def root
    @root || :verilog
  end

  module Verilog0
    def modules
        return elements
    end
  end

  def _nt_verilog
    start_index = index
    if node_cache[:verilog].has_key?(index)
      cached = node_cache[:verilog][index]
      @index = cached.interval.end if cached
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_vlmodule
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Verilog0)
    end

    node_cache[:verilog][start_index] = r0

    r0
  end

  module Vlmodule0
    def ws1
      elements[1]
    end

    def na
      elements[2]
    end

    def ws2
      elements[3]
    end

    def param
      elements[4]
    end

    def ws3
      elements[5]
    end

    def ws4
      elements[7]
    end

    def co
      elements[8]
    end

    def ws5
      elements[9]
    end

    def ws6
      elements[11]
    end
  end

  module Vlmodule1
    def parameters
        return param.value()
    end

    def content
        return co
    end

    def statements
        return co.statements
    end

    def to_s
        return "{Module #{name}\nParameters: #{parameters.count}}"
    end

    def module_name
        na.text_value
    end
  end

  def _nt_vlmodule
    start_index = index
    if node_cache[:vlmodule].has_key?(index)
      cached = node_cache[:vlmodule][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('module', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('module')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_name
        s0 << r3
        if r3
          r4 = _nt_ws
          s0 << r4
          if r4
            r6 = _nt_parameters
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r7 = _nt_ws
              s0 << r7
              if r7
                if has_terminal?(';', false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(';')
                  r8 = nil
                end
                s0 << r8
                if r8
                  r9 = _nt_ws
                  s0 << r9
                  if r9
                    r10 = _nt_content
                    s0 << r10
                    if r10
                      r11 = _nt_ws
                      s0 << r11
                      if r11
                        if has_terminal?('endmodule', false, index)
                          r12 = instantiate_node(SyntaxNode,input, index...(index + 9))
                          @index += 9
                        else
                          terminal_parse_failure('endmodule')
                          r12 = nil
                        end
                        s0 << r12
                        if r12
                          r13 = _nt_ws
                          s0 << r13
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Vlmodule0)
      r0.extend(Vlmodule1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:vlmodule][start_index] = r0

    r0
  end

  module Name0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9_"-"]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Name0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:name][start_index] = r0

    r0
  end

  def _nt_type
    start_index = index
    if node_cache[:type].has_key?(index)
      cached = node_cache[:type][index]
      @index = cached.interval.end if cached
      return cached
    end

    r0 = _nt_name

    node_cache[:type][start_index] = r0

    r0
  end

  module Parameters0
    def ws
      elements[1]
    end

    def param
      elements[2]
    end
  end

  module Parameters1
    def ws1
      elements[1]
    end

    def first_parameter
      elements[2]
    end

    def ws2
      elements[3]
    end

    def rest_parameters
      elements[4]
    end

    def ws3
      elements[5]
    end

  end

  module Parameters2
    def value
        [first_parameter] + rest_parameters.elements.map do |field|
            field.param
        end
    end
  end

  def _nt_parameters
    start_index = index
    if node_cache[:parameters].has_key?(index)
      cached = node_cache[:parameters][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_parameter
        s0 << r3
        if r3
          r4 = _nt_ws
          s0 << r4
          if r4
            s5, i5 = [], index
            loop do
              i6, s6 = index, []
              if has_terminal?(',', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(',')
                r7 = nil
              end
              s6 << r7
              if r7
                r8 = _nt_ws
                s6 << r8
                if r8
                  r9 = _nt_parameter
                  s6 << r9
                end
              end
              if s6.last
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                r6.extend(Parameters0)
              else
                @index = i6
                r6 = nil
              end
              if r6
                s5 << r6
              else
                break
              end
            end
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            s0 << r5
            if r5
              r10 = _nt_ws
              s0 << r10
              if r10
                if has_terminal?(')', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r11 = nil
                end
                s0 << r11
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Parameters1)
      r0.extend(Parameters2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameters][start_index] = r0

    r0
  end

  module Parameter0
    def ty
      elements[0]
    end

    def ws1
      elements[1]
    end

    def si
      elements[2]
    end

    def ws2
      elements[3]
    end

    def na
      elements[4]
    end
  end

  module Parameter1

    def type
        return ty.text_value
    end

    def array?
        return si.text_value != ""
    end

    def size
        return si.text_value
    end

    def name
        return na.text_value
    end
  end

  module Parameter2
    def ws1
      elements[0]
    end

    def na
      elements[1]
    end

    def ws2
      elements[2]
    end
  end

  module Parameter3
    def type
        return "Unknown"
    end

    def array?
        return false
    end

    def name
        return na.text_value
    end
  end

  def _nt_parameter
    start_index = index
    if node_cache[:parameter].has_key?(index)
      cached = node_cache[:parameter][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_type
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        r5 = _nt_size
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
        if r4
          r6 = _nt_ws
          s1 << r6
          if r6
            r7 = _nt_name
            s1 << r7
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Parameter0)
      r1.extend(Parameter1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r9 = _nt_ws
      s8 << r9
      if r9
        r10 = _nt_name
        s8 << r10
        if r10
          r11 = _nt_ws
          s8 << r11
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(Parameter2)
        r8.extend(Parameter3)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:parameter][start_index] = r0

    r0
  end

  module Size0
    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

    def ws3
      elements[5]
    end

    def ws4
      elements[7]
    end

  end

  def _nt_size
    start_index = index
    if node_cache[:size].has_key?(index)
      cached = node_cache[:size][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          r5 = _nt_ws
          s0 << r5
          if r5
            if has_terminal?(':', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r6 = nil
            end
            s0 << r6
            if r6
              r7 = _nt_ws
              s0 << r7
              if r7
                s8, i8 = [], index
                loop do
                  if has_terminal?('\G[0-9]', true, index)
                    r9 = true
                    @index += 1
                  else
                    r9 = nil
                  end
                  if r9
                    s8 << r9
                  else
                    break
                  end
                end
                if s8.empty?
                  @index = i8
                  r8 = nil
                else
                  r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                end
                s0 << r8
                if r8
                  r10 = _nt_ws
                  s0 << r10
                  if r10
                    if has_terminal?(']', false, index)
                      r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(']')
                      r11 = nil
                    end
                    s0 << r11
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Size0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:size][start_index] = r0

    r0
  end

  module Index0
    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

  end

  def _nt_index
    start_index = index
    if node_cache[:index].has_key?(index)
      cached = node_cache[:index][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          r5 = _nt_ws
          s0 << r5
          if r5
            if has_terminal?(']', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r6 = nil
            end
            s0 << r6
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Index0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:index][start_index] = r0

    r0
  end

  module Content0
    def ws
      elements[0]
    end

    def state
      elements[1]
    end
  end

  module Content1
    def first_state
      elements[0]
    end

    def rest
      elements[1]
    end
  end

  module Content2
    def statements
        [first_state] + rest.elements.map do |f|
            f.state
        end
    end
  end

  def _nt_content
    start_index = index
    if node_cache[:content].has_key?(index)
      cached = node_cache[:content][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_statement
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_ws
        s3 << r4
        if r4
          r5 = _nt_statement
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Content0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Content1)
      r0.extend(Content2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:content][start_index] = r0

    r0
  end

  module Statement0
    def ws1
      elements[1]
    end

    def name1
      elements[2]
    end

    def ws2
      elements[3]
    end

    def ws3
      elements[5]
    end

    def ws4
      elements[7]
    end

    def name2
      elements[8]
    end

    def ws5
      elements[9]
    end

  end

  module Statement1
    def statement_kind
        return :assignment
    end
  end

  module Statement2
    def ty
      elements[0]
    end

    def ws1
      elements[1]
    end

    def na
      elements[2]
    end

    def ws2
      elements[3]
    end

    def args
      elements[4]
    end

    def ws3
      elements[5]
    end

  end

  module Statement3
    def statement_kind
        return :instantiation
    end

    def type
        return ty.text_value
    end

    def name
        return na.text_value
    end

    def arguments
        return args.args()
    end

    def compute_coords
        @coords = []
        if (na.text_value =~ /.*_(\d+)_(\d+)/)
            @coords[0] = $1.to_i
            @coords[1] = $2.to_i
        else
            @coords = [0,0]
        end
    end

    def x
        if @coords.nil?
            compute_coords()
        end
        return @coords[0]
    end

    def y
        if @coords.nil?
            compute_coords()
        end
        return @coords[1]
    end
  end

  module Statement4
    def ws1
      elements[0]
    end

    def ws2
      elements[2]
    end

    def name
      elements[3]
    end
  end

  module Statement5
    def ty
      elements[0]
    end

    def ws1
      elements[1]
    end

    def si1
      elements[2]
    end

    def ws2
      elements[3]
    end

    def na
      elements[4]
    end

    def si2
      elements[5]
    end

    def ws3
      elements[7]
    end

  end

  module Statement6
    def statement_kind
        return :declaration
    end

    def type
        return ty.text_value
    end

    def array?
        return si != ""
    end

    def size
        return si.text_value
    end

    def name
        return na.text_value
    end
  end

  module Statement7
    def ex
      elements[0]
    end

    def ws
      elements[1]
    end

  end

  module Statement8
    def statement_kind
        return :expr
    end

    def expr
        return ex
    end
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?("assign", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure("assign")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        r4 = _nt_name
        s1 << r4
        if r4
          r5 = _nt_ws
          s1 << r5
          if r5
            r7 = _nt_index
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r6
            if r6
              r8 = _nt_ws
              s1 << r8
              if r8
                if has_terminal?("=", false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("=")
                  r9 = nil
                end
                s1 << r9
                if r9
                  r10 = _nt_ws
                  s1 << r10
                  if r10
                    r11 = _nt_name
                    s1 << r11
                    if r11
                      r12 = _nt_ws
                      s1 << r12
                      if r12
                        r14 = _nt_index
                        if r14
                          r13 = r14
                        else
                          r13 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s1 << r13
                        if r13
                          if has_terminal?(";", false, index)
                            r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(";")
                            r15 = nil
                          end
                          s1 << r15
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Statement0)
      r1.extend(Statement1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i16, s16 = index, []
      r17 = _nt_type
      s16 << r17
      if r17
        r18 = _nt_ws
        s16 << r18
        if r18
          r19 = _nt_name
          s16 << r19
          if r19
            r20 = _nt_ws
            s16 << r20
            if r20
              r21 = _nt_arguments
              s16 << r21
              if r21
                r22 = _nt_ws
                s16 << r22
                if r22
                  if has_terminal?(';', false, index)
                    r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(';')
                    r23 = nil
                  end
                  s16 << r23
                end
              end
            end
          end
        end
      end
      if s16.last
        r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
        r16.extend(Statement2)
        r16.extend(Statement3)
      else
        @index = i16
        r16 = nil
      end
      if r16
        r0 = r16
      else
        i24, s24 = index, []
        r25 = _nt_type
        s24 << r25
        if r25
          r26 = _nt_ws
          s24 << r26
          if r26
            r28 = _nt_size
            if r28
              r27 = r28
            else
              r27 = instantiate_node(SyntaxNode,input, index...index)
            end
            s24 << r27
            if r27
              r29 = _nt_ws
              s24 << r29
              if r29
                r30 = _nt_name
                s24 << r30
                if r30
                  r32 = _nt_size
                  if r32
                    r31 = r32
                  else
                    r31 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s24 << r31
                  if r31
                    s33, i33 = [], index
                    loop do
                      i34, s34 = index, []
                      r35 = _nt_ws
                      s34 << r35
                      if r35
                        if has_terminal?(",", false, index)
                          r36 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(",")
                          r36 = nil
                        end
                        s34 << r36
                        if r36
                          r37 = _nt_ws
                          s34 << r37
                          if r37
                            r38 = _nt_name
                            s34 << r38
                          end
                        end
                      end
                      if s34.last
                        r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                        r34.extend(Statement4)
                      else
                        @index = i34
                        r34 = nil
                      end
                      if r34
                        s33 << r34
                      else
                        break
                      end
                    end
                    r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                    s24 << r33
                    if r33
                      r39 = _nt_ws
                      s24 << r39
                      if r39
                        if has_terminal?(';', false, index)
                          r40 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(';')
                          r40 = nil
                        end
                        s24 << r40
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s24.last
          r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
          r24.extend(Statement5)
          r24.extend(Statement6)
        else
          @index = i24
          r24 = nil
        end
        if r24
          r0 = r24
        else
          i41, s41 = index, []
          r42 = _nt_expr
          s41 << r42
          if r42
            r43 = _nt_ws
            s41 << r43
            if r43
              if has_terminal?(';', false, index)
                r44 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(';')
                r44 = nil
              end
              s41 << r44
            end
          end
          if s41.last
            r41 = instantiate_node(SyntaxNode,input, i41...index, s41)
            r41.extend(Statement7)
            r41.extend(Statement8)
          else
            @index = i41
            r41 = nil
          end
          if r41
            r0 = r41
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module Arguments0
    def ws1
      elements[1]
    end

    def ex
      elements[2]
    end

    def ws2
      elements[3]
    end
  end

  module Arguments1
    def ws1
      elements[1]
    end

    def first
      elements[2]
    end

    def ws2
      elements[3]
    end

    def rest
      elements[4]
    end

    def ws3
      elements[5]
    end

  end

  module Arguments2
    def args
        [first] + rest.elements.map do |f|
            f.ex
        end
    end
  end

  def _nt_arguments
    start_index = index
    if node_cache[:arguments].has_key?(index)
      cached = node_cache[:arguments][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_expr
        s0 << r3
        if r3
          r4 = _nt_ws
          s0 << r4
          if r4
            s5, i5 = [], index
            loop do
              i6, s6 = index, []
              if has_terminal?(',', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(',')
                r7 = nil
              end
              s6 << r7
              if r7
                r8 = _nt_ws
                s6 << r8
                if r8
                  r9 = _nt_expr
                  s6 << r9
                  if r9
                    r10 = _nt_ws
                    s6 << r10
                  end
                end
              end
              if s6.last
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                r6.extend(Arguments0)
              else
                @index = i6
                r6 = nil
              end
              if r6
                s5 << r6
              else
                break
              end
            end
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            s0 << r5
            if r5
              r11 = _nt_ws
              s0 << r11
              if r11
                if has_terminal?(')', false, index)
                  r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r12 = nil
                end
                s0 << r12
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Arguments1)
      r0.extend(Arguments2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:arguments][start_index] = r0

    r0
  end

  module Expr0
    def name
      elements[0]
    end

    def ws
      elements[1]
    end

    def idx
      elements[2]
    end
  end

  module Expr1
    def is_number?
        false
    end

    def variable_name
        return name.text_value
    end

    def index
        if (idx.text_value == "")
            return nil
        else
            return idx.text_value.slice(1,idx.text_value.length - 2).to_i
        end
    end
  end

  module Expr2
  end

  module Expr3
    def is_number?
        true
    end
    
    def content
        self.text_value
    end
  end

  def _nt_expr
    start_index = index
    if node_cache[:expr].has_key?(index)
      cached = node_cache[:expr][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_name
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        r5 = _nt_index
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Expr0)
      r1.extend(Expr1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('-', false, index)
        r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r8 = nil
      end
      if r8
        r7 = r8
      else
        r7 = instantiate_node(SyntaxNode,input, index...index)
      end
      s6 << r7
      if r7
        s9, i9 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r10 = true
            @index += 1
          else
            r10 = nil
          end
          if r10
            s9 << r10
          else
            break
          end
        end
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        s6 << r9
        if r9
          if has_terminal?("'", false, index)
            r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("'")
            r11 = nil
          end
          s6 << r11
          if r11
            if has_terminal?('\G[bBhHdDoO]', true, index)
              r12 = true
              @index += 1
            else
              r12 = nil
            end
            s6 << r12
            if r12
              s13, i13 = [], index
              loop do
                if has_terminal?('\G[0-9a-fA-F]', true, index)
                  r14 = true
                  @index += 1
                else
                  r14 = nil
                end
                if r14
                  s13 << r14
                else
                  break
                end
              end
              if s13.empty?
                @index = i13
                r13 = nil
              else
                r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
              end
              s6 << r13
            end
          end
        end
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(Expr2)
        r6.extend(Expr3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:expr][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      @index = cached.interval.end if cached
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(" ", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(" ")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?("\n", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?("\t", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\t")
            r4 = nil
          end
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:ws][start_index] = r0

    r0
  end

  module Comment0
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("//", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("//")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z _0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

end

class VerilogParser < Treetop::Runtime::CompiledParser
  include Verilog
end

