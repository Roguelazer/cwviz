# Autogenerated from a Treetop grammar. Edits may be lost.


module Verilog
  include Treetop::Runtime

  def root
    @root || :verilog
  end

  module Verilog0
    def modules
        return elements
    end
  end

  def _nt_verilog
    start_index = index
    if node_cache[:verilog].has_key?(index)
      cached = node_cache[:verilog][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_vlmodule
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Verilog0)
    end

    node_cache[:verilog][start_index] = r0

    r0
  end

  module Vlmodule0
    def ws1
      elements[1]
    end

    def na
      elements[2]
    end

    def ws2
      elements[3]
    end

    def param
      elements[4]
    end

    def ws3
      elements[5]
    end

    def ws4
      elements[7]
    end

    def co
      elements[8]
    end

    def ws5
      elements[9]
    end

    def ws6
      elements[11]
    end
  end

  module Vlmodule1
    def parameters
        if param.text_value == ""
            return []
        end
        return param.value()
    end

    def content
        return co
    end

    def statements
        return co.statements
    end

    def to_s
        return "{Module #{name}\nParameters: #{parameters.count}}"
    end

    def module_name
        na.text_value
    end
  end

  def _nt_vlmodule
    start_index = index
    if node_cache[:vlmodule].has_key?(index)
      cached = node_cache[:vlmodule][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('module', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('module')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_name
        s0 << r3
        if r3
          r4 = _nt_ws
          s0 << r4
          if r4
            r6 = _nt_parameters
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r7 = _nt_ws
              s0 << r7
              if r7
                if has_terminal?(';', false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(';')
                  r8 = nil
                end
                s0 << r8
                if r8
                  r9 = _nt_ws
                  s0 << r9
                  if r9
                    r10 = _nt_content
                    s0 << r10
                    if r10
                      r11 = _nt_ws
                      s0 << r11
                      if r11
                        i12 = index
                        if has_terminal?('endmodule;', false, index)
                          r13 = instantiate_node(SyntaxNode,input, index...(index + 10))
                          @index += 10
                        else
                          terminal_parse_failure('endmodule;')
                          r13 = nil
                        end
                        if r13
                          r12 = r13
                        else
                          if has_terminal?('endmodule', false, index)
                            r14 = instantiate_node(SyntaxNode,input, index...(index + 9))
                            @index += 9
                          else
                            terminal_parse_failure('endmodule')
                            r14 = nil
                          end
                          if r14
                            r12 = r14
                          else
                            @index = i12
                            r12 = nil
                          end
                        end
                        s0 << r12
                        if r12
                          r15 = _nt_ws
                          s0 << r15
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Vlmodule0)
      r0.extend(Vlmodule1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:vlmodule][start_index] = r0

    r0
  end

  module Name0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9_"-"]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Name0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:name][start_index] = r0

    r0
  end

  def _nt_type
    start_index = index
    if node_cache[:type].has_key?(index)
      cached = node_cache[:type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_name

    node_cache[:type][start_index] = r0

    r0
  end

  def _nt_ptype
    start_index = index
    if node_cache[:ptype].has_key?(index)
      cached = node_cache[:ptype][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("input", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure("input")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("output", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure("output")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("inout", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure("inout")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:ptype][start_index] = r0

    r0
  end

  module Parameters0
    def ws
      elements[1]
    end

    def param
      elements[2]
    end
  end

  module Parameters1
    def ws1
      elements[1]
    end

    def first_parameter
      elements[2]
    end

    def ws2
      elements[3]
    end

    def rest_parameters
      elements[4]
    end

    def ws3
      elements[5]
    end

  end

  module Parameters2
    def value
        return ([first_parameter] + rest_parameters.elements.map { |param_field|
            param_field.param
        })
    end
  end

  def _nt_parameters
    start_index = index
    if node_cache[:parameters].has_key?(index)
      cached = node_cache[:parameters][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_parameter
        s0 << r3
        if r3
          r4 = _nt_ws
          s0 << r4
          if r4
            s5, i5 = [], index
            loop do
              i6, s6 = index, []
              if has_terminal?(',', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(',')
                r7 = nil
              end
              s6 << r7
              if r7
                r8 = _nt_ws
                s6 << r8
                if r8
                  r9 = _nt_parameter
                  s6 << r9
                end
              end
              if s6.last
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                r6.extend(Parameters0)
              else
                @index = i6
                r6 = nil
              end
              if r6
                s5 << r6
              else
                break
              end
            end
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            s0 << r5
            if r5
              r10 = _nt_ws
              s0 << r10
              if r10
                if has_terminal?(')', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r11 = nil
                end
                s0 << r11
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Parameters1)
      r0.extend(Parameters2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameters][start_index] = r0

    r0
  end

  module Parameter0
    def ty
      elements[0]
    end

    def ws1
      elements[1]
    end

    def si
      elements[2]
    end

    def ws2
      elements[3]
    end

    def na
      elements[4]
    end
  end

  module Parameter1

    def type
        return ty.text_value.to_sym
    end

    def array?
        return si.text_value != ""
    end

    def size
        return si.text_value
    end

    def name
        return na.text_value
    end

    def to_s
        return "{Parameter: name=#{name}, type=#{type}}"
    end
  end

  module Parameter2
    def ws
      elements[0]
    end

    def na
      elements[1]
    end
  end

  module Parameter3
    def type
        return :unknown
            y = x;
    end

    def array?
        return false
    end

    def name
        return na.text_value
    end

    def to_s
        return "{Untyped parameter: name=#{name}}"
    end
  end

  def _nt_parameter
    start_index = index
    if node_cache[:parameter].has_key?(index)
      cached = node_cache[:parameter][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_ptype
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        r5 = _nt_size
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
        if r4
          r6 = _nt_ws
          s1 << r6
          if r6
            r7 = _nt_name
            s1 << r7
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Parameter0)
      r1.extend(Parameter1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r9 = _nt_ws
      s8 << r9
      if r9
        r10 = _nt_name
        s8 << r10
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(Parameter2)
        r8.extend(Parameter3)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:parameter][start_index] = r0

    r0
  end

  module Size0
    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

    def ws3
      elements[5]
    end

    def ws4
      elements[7]
    end

  end

  def _nt_size
    start_index = index
    if node_cache[:size].has_key?(index)
      cached = node_cache[:size][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          r5 = _nt_ws
          s0 << r5
          if r5
            if has_terminal?(':', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r6 = nil
            end
            s0 << r6
            if r6
              r7 = _nt_ws
              s0 << r7
              if r7
                s8, i8 = [], index
                loop do
                  if has_terminal?('\G[0-9]', true, index)
                    r9 = true
                    @index += 1
                  else
                    r9 = nil
                  end
                  if r9
                    s8 << r9
                  else
                    break
                  end
                end
                if s8.empty?
                  @index = i8
                  r8 = nil
                else
                  r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                end
                s0 << r8
                if r8
                  r10 = _nt_ws
                  s0 << r10
                  if r10
                    if has_terminal?(']', false, index)
                      r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(']')
                      r11 = nil
                    end
                    s0 << r11
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Size0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:size][start_index] = r0

    r0
  end

  module Index0
    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

  end

  def _nt_index
    start_index = index
    if node_cache[:index].has_key?(index)
      cached = node_cache[:index][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          r5 = _nt_ws
          s0 << r5
          if r5
            if has_terminal?(']', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r6 = nil
            end
            s0 << r6
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Index0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:index][start_index] = r0

    r0
  end

  module Content0
    def ws
      elements[0]
    end

    def state
      elements[1]
    end
  end

  module Content1
    def first_state
      elements[0]
    end

    def rest
      elements[1]
    end
  end

  module Content2
    def statements
        [first_state] + rest.elements.map do |f|
            f.state
        end
    end
  end

  def _nt_content
    start_index = index
    if node_cache[:content].has_key?(index)
      cached = node_cache[:content][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_statement
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_ws
        s3 << r4
        if r4
          r5 = _nt_statement
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Content0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Content1)
      r0.extend(Content2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:content][start_index] = r0

    r0
  end

  module Statement0
    def ws
      elements[1]
    end

    def na
      elements[2]
    end

  end

  module Statement1
    def statement_kind
        return :input
    end

    def name
        return na.text_value
    end
  end

  module Statement2
    def ws
      elements[1]
    end

    def na
      elements[2]
    end

  end

  module Statement3
    def statement_kind
        return :output
    end

    def name
        return na.text_value
    end
  end

  module Statement4
    def ws1
      elements[1]
    end

    def expr1
      elements[2]
    end

    def ws2
      elements[3]
    end

    def ws3
      elements[5]
    end

    def expr2
      elements[6]
    end

    def ws4
      elements[7]
    end

  end

  module Statement5
    def statement_kind
        return :assignment
    end
  end

  module Statement6
    def ty
      elements[0]
    end

    def ws1
      elements[1]
    end

    def na
      elements[2]
    end

    def ws2
      elements[3]
    end

    def args
      elements[4]
    end

    def ws3
      elements[5]
    end

  end

  module Statement7
    def statement_kind
        return :instantiation
    end

    def type
        return ty.text_value
    end

    def name
        if @coords.nil?
            compute_coords()
        end
        return @name
    end

    def name_full
        return na.text_value
    end

    def arguments
        return args.args()
    end

    def compute_coords
        @coords = []
        if (na.text_value =~ /(.*)_(\d+)_(\d+)/)
            @coords[0] = $2.to_i
            @coords[1] = $3.to_i
            @name = $1.to_s
        else
            @coords = [0,0]
            @name = na.text_value
        end
    end

    def x
        if @coords.nil?
            compute_coords()
        end
        return @coords[0]
    end

    def y
        if @coords.nil?
            compute_coords()
        end
        return @coords[1]
    end
  end

  module Statement8
    def ws1
      elements[0]
    end

    def ws2
      elements[2]
    end

    def name
      elements[3]
    end
  end

  module Statement9
    def ty
      elements[0]
    end

    def ws1
      elements[1]
    end

    def si1
      elements[2]
    end

    def ws2
      elements[3]
    end

    def na
      elements[4]
    end

    def si2
      elements[5]
    end

    def ws3
      elements[7]
    end

  end

  module Statement10
    def statement_kind
        return :declaration
    end

    def type
        return ty.text_value
    end

    def array?
        return si != ""
    end

    def size
        return si.text_value
    end

    def name
        return na.text_value
    end
  end

  module Statement11
    def ex
      elements[0]
    end

    def ws
      elements[1]
    end

  end

  module Statement12
    def statement_kind
        return :expr
    end

    def expr
        return ex
    end
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?("input", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure("input")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        r4 = _nt_name
        s1 << r4
        if r4
          if has_terminal?(";", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(";")
            r5 = nil
          end
          s1 << r5
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Statement0)
      r1.extend(Statement1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?("output", false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure("output")
        r7 = nil
      end
      s6 << r7
      if r7
        r8 = _nt_ws
        s6 << r8
        if r8
          r9 = _nt_name
          s6 << r9
          if r9
            if has_terminal?(";", false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(";")
              r10 = nil
            end
            s6 << r10
          end
        end
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(Statement2)
        r6.extend(Statement3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        i11, s11 = index, []
        if has_terminal?("assign", false, index)
          r12 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure("assign")
          r12 = nil
        end
        s11 << r12
        if r12
          r13 = _nt_ws
          s11 << r13
          if r13
            r14 = _nt_expr
            s11 << r14
            if r14
              r15 = _nt_ws
              s11 << r15
              if r15
                if has_terminal?("=", false, index)
                  r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("=")
                  r16 = nil
                end
                s11 << r16
                if r16
                  r17 = _nt_ws
                  s11 << r17
                  if r17
                    r18 = _nt_expr
                    s11 << r18
                    if r18
                      r19 = _nt_ws
                      s11 << r19
                      if r19
                        if has_terminal?(";", false, index)
                          r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(";")
                          r20 = nil
                        end
                        s11 << r20
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s11.last
          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
          r11.extend(Statement4)
          r11.extend(Statement5)
        else
          @index = i11
          r11 = nil
        end
        if r11
          r0 = r11
        else
          i21, s21 = index, []
          r22 = _nt_type
          s21 << r22
          if r22
            r23 = _nt_ws
            s21 << r23
            if r23
              r24 = _nt_name
              s21 << r24
              if r24
                r25 = _nt_ws
                s21 << r25
                if r25
                  r26 = _nt_arguments
                  s21 << r26
                  if r26
                    r27 = _nt_ws
                    s21 << r27
                    if r27
                      if has_terminal?(';', false, index)
                        r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(';')
                        r28 = nil
                      end
                      s21 << r28
                    end
                  end
                end
              end
            end
          end
          if s21.last
            r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
            r21.extend(Statement6)
            r21.extend(Statement7)
          else
            @index = i21
            r21 = nil
          end
          if r21
            r0 = r21
          else
            i29, s29 = index, []
            r30 = _nt_type
            s29 << r30
            if r30
              r31 = _nt_ws
              s29 << r31
              if r31
                r33 = _nt_size
                if r33
                  r32 = r33
                else
                  r32 = instantiate_node(SyntaxNode,input, index...index)
                end
                s29 << r32
                if r32
                  r34 = _nt_ws
                  s29 << r34
                  if r34
                    r35 = _nt_name
                    s29 << r35
                    if r35
                      r37 = _nt_size
                      if r37
                        r36 = r37
                      else
                        r36 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s29 << r36
                      if r36
                        s38, i38 = [], index
                        loop do
                          i39, s39 = index, []
                          r40 = _nt_ws
                          s39 << r40
                          if r40
                            if has_terminal?(",", false, index)
                              r41 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(",")
                              r41 = nil
                            end
                            s39 << r41
                            if r41
                              r42 = _nt_ws
                              s39 << r42
                              if r42
                                r43 = _nt_name
                                s39 << r43
                              end
                            end
                          end
                          if s39.last
                            r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
                            r39.extend(Statement8)
                          else
                            @index = i39
                            r39 = nil
                          end
                          if r39
                            s38 << r39
                          else
                            break
                          end
                        end
                        r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
                        s29 << r38
                        if r38
                          r44 = _nt_ws
                          s29 << r44
                          if r44
                            if has_terminal?(';', false, index)
                              r45 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(';')
                              r45 = nil
                            end
                            s29 << r45
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            if s29.last
              r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
              r29.extend(Statement9)
              r29.extend(Statement10)
            else
              @index = i29
              r29 = nil
            end
            if r29
              r0 = r29
            else
              i46, s46 = index, []
              r47 = _nt_expr
              s46 << r47
              if r47
                r48 = _nt_ws
                s46 << r48
                if r48
                  if has_terminal?(';', false, index)
                    r49 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(';')
                    r49 = nil
                  end
                  s46 << r49
                end
              end
              if s46.last
                r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
                r46.extend(Statement11)
                r46.extend(Statement12)
              else
                @index = i46
                r46 = nil
              end
              if r46
                r0 = r46
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module Arguments0
    def ws1
      elements[1]
    end

    def ex
      elements[2]
    end

    def ws2
      elements[3]
    end
  end

  module Arguments1
    def ws1
      elements[1]
    end

    def first
      elements[2]
    end

    def ws2
      elements[3]
    end

    def rest
      elements[4]
    end

    def ws3
      elements[5]
    end

  end

  module Arguments2
    def args
        [first] + rest.elements.map do |f|
            f.ex
        end
    end
  end

  module Arguments3
    def ws1
      elements[1]
    end

    def ex
      elements[2]
    end

    def ws2
      elements[3]
    end
  end

  module Arguments4
    def ws1
      elements[1]
    end

    def first
      elements[2]
    end

    def ws2
      elements[3]
    end

    def rest
      elements[4]
    end

    def ws3
      elements[5]
    end

  end

  module Arguments5
    def args
        [first] + rest.elements.map do |f|
            f.ex
        end
    end
  end

  def _nt_arguments
    start_index = index
    if node_cache[:arguments].has_key?(index)
      cached = node_cache[:arguments][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        r4 = _nt_expr
        s1 << r4
        if r4
          r5 = _nt_ws
          s1 << r5
          if r5
            s6, i6 = [], index
            loop do
              i7, s7 = index, []
              if has_terminal?(',', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(',')
                r8 = nil
              end
              s7 << r8
              if r8
                r9 = _nt_ws
                s7 << r9
                if r9
                  r10 = _nt_expr
                  s7 << r10
                  if r10
                    r11 = _nt_ws
                    s7 << r11
                  end
                end
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(Arguments0)
              else
                @index = i7
                r7 = nil
              end
              if r7
                s6 << r7
              else
                break
              end
            end
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            s1 << r6
            if r6
              r12 = _nt_ws
              s1 << r12
              if r12
                if has_terminal?(')', false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r13 = nil
                end
                s1 << r13
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Arguments1)
      r1.extend(Arguments2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i14, s14 = index, []
      if has_terminal?('(', false, index)
        r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r15 = nil
      end
      s14 << r15
      if r15
        r16 = _nt_ws
        s14 << r16
        if r16
          r17 = _nt_mapexpr
          s14 << r17
          if r17
            r18 = _nt_ws
            s14 << r18
            if r18
              s19, i19 = [], index
              loop do
                i20, s20 = index, []
                if has_terminal?(',', false, index)
                  r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(',')
                  r21 = nil
                end
                s20 << r21
                if r21
                  r22 = _nt_ws
                  s20 << r22
                  if r22
                    r23 = _nt_mapexpr
                    s20 << r23
                    if r23
                      r24 = _nt_ws
                      s20 << r24
                    end
                  end
                end
                if s20.last
                  r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                  r20.extend(Arguments3)
                else
                  @index = i20
                  r20 = nil
                end
                if r20
                  s19 << r20
                else
                  break
                end
              end
              r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
              s14 << r19
              if r19
                r25 = _nt_ws
                s14 << r25
                if r25
                  if has_terminal?(')', false, index)
                    r26 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r26 = nil
                  end
                  s14 << r26
                end
              end
            end
          end
        end
      end
      if s14.last
        r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
        r14.extend(Arguments4)
        r14.extend(Arguments5)
      else
        @index = i14
        r14 = nil
      end
      if r14
        r0 = r14
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:arguments][start_index] = r0

    r0
  end

  module Mapexpr0
    def name
      elements[1]
    end

    def ws1
      elements[3]
    end

    def expr
      elements[4]
    end

    def ws2
      elements[5]
    end

  end

  module Mapexpr1
    def content
        return {"name"=>name.text_value, "content"=>expr.content}
    end
  end

  def _nt_mapexpr
    start_index = index
    if node_cache[:mapexpr].has_key?(index)
      cached = node_cache[:mapexpr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('.', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('.')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_name
      s0 << r2
      if r2
        if has_terminal?('(', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_ws
          s0 << r4
          if r4
            r5 = _nt_expr
            s0 << r5
            if r5
              r6 = _nt_ws
              s0 << r6
              if r6
                if has_terminal?(')', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r7 = nil
                end
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Mapexpr0)
      r0.extend(Mapexpr1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:mapexpr][start_index] = r0

    r0
  end

  module Expr0
    def atom
      elements[0]
    end

    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

    def expr
      elements[4]
    end
  end

  module Expr1
    def type
        return :land
    end
  end

  module Expr2
    def atom
      elements[0]
    end

    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

    def expr
      elements[4]
    end
  end

  module Expr3
    def type
        return :lor
    end
  end

  module Expr4
    def atom
      elements[0]
    end

    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

    def expr
      elements[4]
    end
  end

  module Expr5
    def type
        return :and
    end
  end

  module Expr6
    def atom
      elements[0]
    end

    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

    def expr
      elements[4]
    end
  end

  module Expr7
    def type
        return :or
    end
  end

  module Expr8
    def atom
      elements[0]
    end

    def ws1
      elements[1]
    end

    def ws2
      elements[3]
    end

    def expr
      elements[4]
    end
  end

  module Expr9
    def type
        return :xor
    end
  end

  module Expr10
    def ws
      elements[1]
    end

    def atom
      elements[2]
    end
  end

  module Expr11
    def type
        return :not
    end
  end

  def _nt_expr
    start_index = index
    if node_cache[:expr].has_key?(index)
      cached = node_cache[:expr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_atom
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        if has_terminal?("&&", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("&&")
          r4 = nil
        end
        s1 << r4
        if r4
          r5 = _nt_ws
          s1 << r5
          if r5
            r6 = _nt_expr
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Expr0)
      r1.extend(Expr1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_atom
      s7 << r8
      if r8
        r9 = _nt_ws
        s7 << r9
        if r9
          if has_terminal?("||", false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("||")
            r10 = nil
          end
          s7 << r10
          if r10
            r11 = _nt_ws
            s7 << r11
            if r11
              r12 = _nt_expr
              s7 << r12
            end
          end
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(Expr2)
        r7.extend(Expr3)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        i13, s13 = index, []
        r14 = _nt_atom
        s13 << r14
        if r14
          r15 = _nt_ws
          s13 << r15
          if r15
            if has_terminal?("&", false, index)
              r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("&")
              r16 = nil
            end
            s13 << r16
            if r16
              r17 = _nt_ws
              s13 << r17
              if r17
                r18 = _nt_expr
                s13 << r18
              end
            end
          end
        end
        if s13.last
          r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          r13.extend(Expr4)
          r13.extend(Expr5)
        else
          @index = i13
          r13 = nil
        end
        if r13
          r0 = r13
        else
          i19, s19 = index, []
          r20 = _nt_atom
          s19 << r20
          if r20
            r21 = _nt_ws
            s19 << r21
            if r21
              if has_terminal?("|", false, index)
                r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("|")
                r22 = nil
              end
              s19 << r22
              if r22
                r23 = _nt_ws
                s19 << r23
                if r23
                  r24 = _nt_expr
                  s19 << r24
                end
              end
            end
          end
          if s19.last
            r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
            r19.extend(Expr6)
            r19.extend(Expr7)
          else
            @index = i19
            r19 = nil
          end
          if r19
            r0 = r19
          else
            i25, s25 = index, []
            r26 = _nt_atom
            s25 << r26
            if r26
              r27 = _nt_ws
              s25 << r27
              if r27
                if has_terminal?("^", false, index)
                  r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("^")
                  r28 = nil
                end
                s25 << r28
                if r28
                  r29 = _nt_ws
                  s25 << r29
                  if r29
                    r30 = _nt_expr
                    s25 << r30
                  end
                end
              end
            end
            if s25.last
              r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
              r25.extend(Expr8)
              r25.extend(Expr9)
            else
              @index = i25
              r25 = nil
            end
            if r25
              r0 = r25
            else
              i31, s31 = index, []
              if has_terminal?("~", false, index)
                r32 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("~")
                r32 = nil
              end
              s31 << r32
              if r32
                r33 = _nt_ws
                s31 << r33
                if r33
                  r34 = _nt_atom
                  s31 << r34
                end
              end
              if s31.last
                r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
                r31.extend(Expr10)
                r31.extend(Expr11)
              else
                @index = i31
                r31 = nil
              end
              if r31
                r0 = r31
              else
                r35 = _nt_atom
                if r35
                  r0 = r35
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:expr][start_index] = r0

    r0
  end

  module Atom0
    def name
      elements[0]
    end

    def ws
      elements[1]
    end

    def idx
      elements[2]
    end
  end

  module Atom1
    def is_number?
        false
    end

    def variable_name
        return name.text_value
    end

    def index
        if (idx.text_value == "")
            return nil
        else
            return idx.text_value.slice(1,idx.text_value.length - 2).to_i
        end
    end

    def content
        if (index.nil?)
            return name.text_value
        end
        return name.text_value + "[" + index.to_s + "]"
    end
  end

  module Atom2
  end

  module Atom3
    def is_number?
        true
    end
    
    def content
        self.text_value
    end
  end

  module Atom4
    def ws1
      elements[1]
    end

    def expr
      elements[2]
    end

    def ws2
      elements[3]
    end

  end

  module Atom5
    def type
        return :paren
    end
  end

  def _nt_atom
    start_index = index
    if node_cache[:atom].has_key?(index)
      cached = node_cache[:atom][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_name
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        r5 = _nt_index
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Atom0)
      r1.extend(Atom1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('-', false, index)
        r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r8 = nil
      end
      if r8
        r7 = r8
      else
        r7 = instantiate_node(SyntaxNode,input, index...index)
      end
      s6 << r7
      if r7
        s9, i9 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r10 = true
            @index += 1
          else
            r10 = nil
          end
          if r10
            s9 << r10
          else
            break
          end
        end
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        s6 << r9
        if r9
          if has_terminal?("'", false, index)
            r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("'")
            r11 = nil
          end
          s6 << r11
          if r11
            if has_terminal?('\G[bBhHdDoO]', true, index)
              r12 = true
              @index += 1
            else
              r12 = nil
            end
            s6 << r12
            if r12
              s13, i13 = [], index
              loop do
                if has_terminal?('\G[0-9a-fA-F]', true, index)
                  r14 = true
                  @index += 1
                else
                  r14 = nil
                end
                if r14
                  s13 << r14
                else
                  break
                end
              end
              if s13.empty?
                @index = i13
                r13 = nil
              else
                r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
              end
              s6 << r13
            end
          end
        end
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(Atom2)
        r6.extend(Atom3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        i15, s15 = index, []
        if has_terminal?("(", false, index)
          r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("(")
          r16 = nil
        end
        s15 << r16
        if r16
          r17 = _nt_ws
          s15 << r17
          if r17
            r18 = _nt_expr
            s15 << r18
            if r18
              r19 = _nt_ws
              s15 << r19
              if r19
                if has_terminal?(")", false, index)
                  r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(")")
                  r20 = nil
                end
                s15 << r20
              end
            end
          end
        end
        if s15.last
          r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
          r15.extend(Atom4)
          r15.extend(Atom5)
        else
          @index = i15
          r15 = nil
        end
        if r15
          r0 = r15
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:atom][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(" ", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(" ")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?("\n", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?("\t", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\t")
            r4 = nil
          end
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:ws][start_index] = r0

    r0
  end

  def _nt_fws
    start_index = index
    if node_cache[:fws].has_key?(index)
      cached = node_cache[:fws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(" ", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(" ")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?("\n", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?("\t", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\t")
            r4 = nil
          end
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:fws][start_index] = r0

    r0
  end

  module Comment0
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("//", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("//")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z _0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

end

class VerilogParser < Treetop::Runtime::CompiledParser
  include Verilog
end

