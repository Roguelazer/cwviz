// ../verilog/wallace_us_BAL_R4/mult_8_8.v
// this is an automatically generated unsigned Radix 4 Wallace tree
// multiplier that is 8 by 8 bits
// it was generated by wallaceGenU.pl
module multiplier(y, x, gnd, p);
	input [7:0] y;
	input [7:0] x;
	input gnd;
	output [15:0] p;

	wire vdd;
	wire [7:0] xbuff;
	wire [7:0] ybuff;
	inverter inv_0_0(vdd,gnd);
	buffer	xbuf_0_16(xbuff[0], x[0]);
	buffer	xbuf_80_16(xbuff[1], x[1]);
	buffer	xbuf_160_16(xbuff[2], x[2]);
	buffer	xbuf_240_16(xbuff[3], x[3]);
	buffer	xbuf_320_16(xbuff[4], x[4]);
	buffer	xbuf_400_16(xbuff[5], x[5]);
	buffer	xbuf_480_16(xbuff[6], x[6]);
	buffer	xbuf_560_16(xbuff[7], x[7]);
	buffer ybuf_0_36(ybuff[0], y[0]);
	buffer ybuf_80_36(ybuff[1], y[1]);
	buffer ybuf_160_36(ybuff[2], y[2]);
	buffer ybuf_240_36(ybuff[3], y[3]);
	buffer ybuf_320_36(ybuff[4], y[4]);
	buffer ybuf_400_36(ybuff[5], y[5]);
	buffer ybuf_480_36(ybuff[6], y[6]);
	buffer ybuf_560_36(ybuff[7], y[7]);

	// setting up pp0
	// Booth encoder for pp0
	wire [8:0] pp0;
	wire sing0, doub0, s0;
	r4be	b_enc_0_56(gnd, xbuff[0], xbuff[1], sing0, doub0, s0);

	wire s0bar;
	inverter	inv_80_56(s0bar, s0);
	// Booth selectors for pp0
	r4bs	b_sel_160_56(gnd, ybuff[0], sing0, doub0, s0, pp0[0]);
	r4bs	b_sel_240_56(ybuff[0], ybuff[1], sing0, doub0, s0, pp0[1]);
	r4bs	b_sel_320_56(ybuff[1], ybuff[2], sing0, doub0, s0, pp0[2]);
	r4bs	b_sel_400_56(ybuff[2], ybuff[3], sing0, doub0, s0, pp0[3]);
	r4bs	b_sel_480_56(ybuff[3], ybuff[4], sing0, doub0, s0, pp0[4]);
	r4bs	b_sel_560_56(ybuff[4], ybuff[5], sing0, doub0, s0, pp0[5]);
	r4bs	b_sel_640_56(ybuff[5], ybuff[6], sing0, doub0, s0, pp0[6]);
	r4bs	b_sel_720_56(ybuff[6], ybuff[7], sing0, doub0, s0, pp0[7]);
	r4bs	b_sel_800_56(ybuff[7], gnd, sing0, doub0, s0, pp0[8]);

	// setting up pp1
	// Booth encoder for pp1
	wire [8:0] pp1;
	wire sing1, doub1, s1;
	r4be	b_enc_0_224(xbuff[1], xbuff[2], xbuff[3], sing1, doub1, s1);

	wire s1bar;
	inverter	inv_80_224(s1bar, s1);
	// Booth selectors for pp1
	r4bs	b_sel_160_224(gnd, ybuff[0], sing1, doub1, s1, pp1[0]);
	r4bs	b_sel_240_224(ybuff[0], ybuff[1], sing1, doub1, s1, pp1[1]);
	r4bs	b_sel_320_224(ybuff[1], ybuff[2], sing1, doub1, s1, pp1[2]);
	r4bs	b_sel_400_224(ybuff[2], ybuff[3], sing1, doub1, s1, pp1[3]);
	r4bs	b_sel_480_224(ybuff[3], ybuff[4], sing1, doub1, s1, pp1[4]);
	r4bs	b_sel_560_224(ybuff[4], ybuff[5], sing1, doub1, s1, pp1[5]);
	r4bs	b_sel_640_224(ybuff[5], ybuff[6], sing1, doub1, s1, pp1[6]);
	r4bs	b_sel_720_224(ybuff[6], ybuff[7], sing1, doub1, s1, pp1[7]);
	r4bs	b_sel_800_224(ybuff[7], gnd, sing1, doub1, s1, pp1[8]);

	// setting up pp2
	// Booth encoder for pp2
	wire [8:0] pp2;
	wire sing2, doub2, s2;
	r4be	b_enc_0_392(xbuff[3], xbuff[4], xbuff[5], sing2, doub2, s2);

	wire s2bar;
	inverter	inv_80_392(s2bar, s2);
	// Booth selectors for pp2
	r4bs	b_sel_160_392(gnd, ybuff[0], sing2, doub2, s2, pp2[0]);
	r4bs	b_sel_240_392(ybuff[0], ybuff[1], sing2, doub2, s2, pp2[1]);
	r4bs	b_sel_320_392(ybuff[1], ybuff[2], sing2, doub2, s2, pp2[2]);
	r4bs	b_sel_400_392(ybuff[2], ybuff[3], sing2, doub2, s2, pp2[3]);
	r4bs	b_sel_480_392(ybuff[3], ybuff[4], sing2, doub2, s2, pp2[4]);
	r4bs	b_sel_560_392(ybuff[4], ybuff[5], sing2, doub2, s2, pp2[5]);
	r4bs	b_sel_640_392(ybuff[5], ybuff[6], sing2, doub2, s2, pp2[6]);
	r4bs	b_sel_720_392(ybuff[6], ybuff[7], sing2, doub2, s2, pp2[7]);
	r4bs	b_sel_800_392(ybuff[7], gnd, sing2, doub2, s2, pp2[8]);

	// setting up CSA0, which sums pp0 pp1 pp2
	wire [10:0] sum_0;
	wire [10:0] carry_0;
	fullAdd	CSA_0_560(carry_0[0], sum_0[0], pp0[2], pp1[0], s1);
	halfAdd CSA_80_560(carry_0[1], sum_0[1], pp0[3], pp1[1]);
	fullAdd	CSA_160_560(carry_0[2], sum_0[2], pp0[4], pp1[2], pp2[0]);
	fullAdd	CSA_240_560(carry_0[3], sum_0[3], pp0[5], pp1[3], pp2[1]);
	fullAdd	CSA_320_560(carry_0[4], sum_0[4], pp0[6], pp1[4], pp2[2]);
	fullAdd	CSA_400_560(carry_0[5], sum_0[5], pp0[7], pp1[5], pp2[3]);
	fullAdd	CSA_480_560(carry_0[6], sum_0[6], pp0[8], pp1[6], pp2[4]);
	fullAdd	CSA_560_560(carry_0[7], sum_0[7], s0, pp1[7], pp2[5]);
	fullAdd	CSA_640_560(carry_0[8], sum_0[8], s0, pp1[8], pp2[6]);
	fullAdd	CSA_720_560(carry_0[9], sum_0[9], s0bar, s1bar, pp2[7]);
	halfAdd CSA_800_560(carry_0[10], sum_0[10], vdd, pp2[8]);
	//sum_0[11] <-  s2bar
	//sum_0[12] <-  vdd

	// setting up pp3
	// Booth encoder for pp3
	wire [8:0] pp3;
	wire sing3, doub3, s3;
	r4be	b_enc_0_688(xbuff[5], xbuff[6], xbuff[7], sing3, doub3, s3);

	wire s3bar;
	inverter	inv_80_688(s3bar, s3);
	// Booth selectors for pp3
	r4bs	b_sel_160_688(gnd, ybuff[0], sing3, doub3, s3, pp3[0]);
	r4bs	b_sel_240_688(ybuff[0], ybuff[1], sing3, doub3, s3, pp3[1]);
	r4bs	b_sel_320_688(ybuff[1], ybuff[2], sing3, doub3, s3, pp3[2]);
	r4bs	b_sel_400_688(ybuff[2], ybuff[3], sing3, doub3, s3, pp3[3]);
	r4bs	b_sel_480_688(ybuff[3], ybuff[4], sing3, doub3, s3, pp3[4]);
	r4bs	b_sel_560_688(ybuff[4], ybuff[5], sing3, doub3, s3, pp3[5]);
	r4bs	b_sel_640_688(ybuff[5], ybuff[6], sing3, doub3, s3, pp3[6]);
	r4bs	b_sel_720_688(ybuff[6], ybuff[7], sing3, doub3, s3, pp3[7]);
	r4bs	b_sel_800_688(ybuff[7], gnd, sing3, doub3, s3, pp3[8]);

	// setting up CSA1, which sums sum_0 carry_0 pp3
	wire [10:0] sum_1;
	wire [10:0] carry_1;
	fullAdd	CSA_0_856(carry_1[0], sum_1[0], sum_0[2], carry_0[1], s2);
	halfAdd CSA_80_856(carry_1[1], sum_1[1], sum_0[3], carry_0[2]);
	fullAdd	CSA_160_856(carry_1[2], sum_1[2], sum_0[4], carry_0[3], pp3[0]);
	fullAdd	CSA_240_856(carry_1[3], sum_1[3], sum_0[5], carry_0[4], pp3[1]);
	fullAdd	CSA_320_856(carry_1[4], sum_1[4], sum_0[6], carry_0[5], pp3[2]);
	fullAdd	CSA_400_856(carry_1[5], sum_1[5], sum_0[7], carry_0[6], pp3[3]);
	fullAdd	CSA_480_856(carry_1[6], sum_1[6], sum_0[8], carry_0[7], pp3[4]);
	fullAdd	CSA_560_856(carry_1[7], sum_1[7], sum_0[9], carry_0[8], pp3[5]);
	fullAdd	CSA_640_856(carry_1[8], sum_1[8], sum_0[10], carry_0[9], pp3[6]);
	fullAdd	CSA_720_856(carry_1[9], sum_1[9],  s2bar, carry_0[10], pp3[7]);
	halfAdd CSA_800_856(carry_1[10], sum_1[10],  vdd, pp3[8]);
	//sum_1[11] <-  s3bar

	// setting up pp4
	// Booth encoder for pp4
	wire [7:0] pp4;
	wire sing4, doub4, s4;
	r4be	b_enc_0_984(xbuff[7], gnd, gnd, sing4, doub4, s4);

	// Booth selectors for pp4
	r4bs	b_sel_80_984(gnd, ybuff[0], sing4, doub4, s4, pp4[0]);
	r4bs	b_sel_160_984(ybuff[0], ybuff[1], sing4, doub4, s4, pp4[1]);
	r4bs	b_sel_240_984(ybuff[1], ybuff[2], sing4, doub4, s4, pp4[2]);
	r4bs	b_sel_320_984(ybuff[2], ybuff[3], sing4, doub4, s4, pp4[3]);
	r4bs	b_sel_400_984(ybuff[3], ybuff[4], sing4, doub4, s4, pp4[4]);
	r4bs	b_sel_480_984(ybuff[4], ybuff[5], sing4, doub4, s4, pp4[5]);
	r4bs	b_sel_560_984(ybuff[5], ybuff[6], sing4, doub4, s4, pp4[6]);
	r4bs	b_sel_640_984(ybuff[6], ybuff[7], sing4, doub4, s4, pp4[7]);

	// setting up CSA2, which sums sum_1 carry_1 pp4
	wire [9:0] sum_2;
	wire [8:0] carry_2;
	fullAdd	CSA_0_1152(carry_2[0], sum_2[0], sum_1[2], carry_1[1], s3);
	halfAdd CSA_80_1152(carry_2[1], sum_2[1], sum_1[3], carry_1[2]);
	fullAdd	CSA_160_1152(carry_2[2], sum_2[2], sum_1[4], carry_1[3], pp4[0]);
	fullAdd	CSA_240_1152(carry_2[3], sum_2[3], sum_1[5], carry_1[4], pp4[1]);
	fullAdd	CSA_320_1152(carry_2[4], sum_2[4], sum_1[6], carry_1[5], pp4[2]);
	fullAdd	CSA_400_1152(carry_2[5], sum_2[5], sum_1[7], carry_1[6], pp4[3]);
	fullAdd	CSA_480_1152(carry_2[6], sum_2[6], sum_1[8], carry_1[7], pp4[4]);
	fullAdd	CSA_560_1152(carry_2[7], sum_2[7], sum_1[9], carry_1[8], pp4[5]);
	fullAdd	CSA_640_1152(carry_2[8], sum_2[8], sum_1[10], carry_1[9], pp4[6]);
	xor3	CSA_720_1152( s3bar, carry_1[10], pp4[7], sum_2[9]);

	//Final summation
	wire [14:0] final_carry;
	halfAdd finalsum_0_1280(final_carry[0], p[0], pp0[0], s0);
	halfAdd finalsum_80_1280(final_carry[1], p[1], pp0[1], final_carry[0]);
	halfAdd finalsum_160_1280(final_carry[2], p[2], sum_0[0], final_carry[1]);
	fullAdd	finalsum_240_1280(final_carry[3], p[3], final_carry[2], sum_0[1], carry_0[0]);
	halfAdd finalsum_320_1280(final_carry[4], p[4], sum_1[0], final_carry[3]);
	fullAdd	finalsum_400_1280(final_carry[5], p[5], final_carry[4], sum_1[1], carry_1[0]);
	halfAdd finalsum_480_1280(final_carry[6], p[6], sum_2[0], final_carry[5]);
	fullAdd	finalsum_560_1280(final_carry[7], p[7], final_carry[6], sum_2[1], carry_2[0]);
	fullAdd	finalsum_640_1280(final_carry[8], p[8], final_carry[7], sum_2[2], carry_2[1]);
	fullAdd	finalsum_720_1280(final_carry[9], p[9], final_carry[8], sum_2[3], carry_2[2]);
	fullAdd	finalsum_800_1280(final_carry[10], p[10], final_carry[9], sum_2[4], carry_2[3]);
	fullAdd	finalsum_880_1280(final_carry[11], p[11], final_carry[10], sum_2[5], carry_2[4]);
	fullAdd	finalsum_960_1280(final_carry[12], p[12], final_carry[11], sum_2[6], carry_2[5]);
	fullAdd	finalsum_1040_1280(final_carry[13], p[13], final_carry[12], sum_2[7], carry_2[6]);
	fullAdd	finalsum_1120_1280(final_carry[14], p[14], final_carry[13], sum_2[8], carry_2[7]);
	xor3	finalsum_1200_1280(sum_2[9], carry_2[8], final_carry[14], p[15]);
endmodule

///////////////////////////////////////////////////////////////////////////
//Standard Unit Cells
//
//Andrew Macrae
//drewmacrae@gmail.com
//
//This is a list of transistor level 1 bit standard cells to be attached
//by PERL based verilog generators for the Multipliers Project at HMC.
//
//Created : September 9, 2009
//last modified: November 5, 2009
///////////////////////////////////////////////////////////////////////////
//Assumed Sizes:
//All cells assumed to be 80lambda wide and have the following heights(lambda)

//Contents:				Sizes:
//and2(y, a, b, c)			40
//and3(y, a, b, c)			48
//and4(y, a, b, c, d)			56
//and5(y, a, b, c, d, e)		64

//aoi(y, a, b, c)			?

//bmux2(y_b, s, s_b, d0, d1)		?

//buffer(y, a)				32


//fourtwo_x(cout, s, carry, a, b, c, d, cin);	432

//fullAdd(cout,   s, a, b, cin)		128
//fullAdd_x(cout,   s,   a, b, cin)	216
//fullAdd_i(cout_b, s_b, a, b, cin)	96

//halfAdd(cout,s,a,b)			80

//inverter(y, a)			16

//maj(y, a, b, c)			104
//min(egress, a, b, c)			48
//mux2(s, s_b, d0, d1, y)		?

//nand2(y, a, b)			24
//nand3(y, a, b, c)			32
//nand4(y, a, b, c, d)			40
//nand5(y, a, b, c, d, e)		48

//nor2(y, a, b)				24
//nor3(y, a, b, c)			32

//oai(y, a, b, c)			?

//or2(y,a,b)				40

//r4be(y0, y1, y2, sing, doub, neg)	168
//r4bs(x0,x1,sing,doub,neg,pp)		128

//subxor(y_b, a, a_b, b, b_b)		??

//sum_b(s_b, a, b, cin, cout_b)		48?

//xor2(a, b, y)				56
//xor3(a,b,c,y);			112
//xnor2(a, b, y)			56

module halfAdd(cout,s,a,b);
    output cout;
    output s;
    input a;
    input b;

    
    and2 carryComp(cout,a,b);
    xor2 sumComp(a,b,s);
endmodule

// booth_encoder_r4 takes in X[2:0], which corresponds to X_(2n-1) to X_(2n+1)
// it outputs control signals to a Booth selector that cause the selector to
// send out the correct partial product

module r4bs(x0,x1,sing,doub,neg,pp);
    input  x0;
    input  x1;
    input  sing;
    input  doub;
    input  neg;
    output pp;

    wire nand1Res;
    wire nand2Res;
    wire nand3Res;

    nand2 nand1(nand1Res,x1,sing);
    nand2 nand2(nand2Res,x0,doub);
    nand2 nand3(nand3Res,nand2Res,nand1Res);
    xor2  xor2(nand3Res,neg,pp);
endmodule

module r4be(y0,y1,y2,sing,doub,neg);
    input y0;
    input y1;
    input y2;
    output sing;
    output doub;
    output neg;

    wire xnorRes;
    wire xor2Res;
    
    buffer buff(neg,y2);

    xor2  XOR1(y0,y1,sing);
    inverter   XNOR(xnorRes,sing);
    xor2  XOR2(y1,y2,xor2Res);
    and2  AND(doub,xor2Res,xnorRes);
    //assign double = (X[0] ~^ X[1]) & (X[1] ^ X[2]);
endmodule

module fullAdd_x(cout, s, a, b, cin);
    output cout;
    output s;
    input a;
    input b;
    input cin;

    wire xorRes;

    xor2  firstXOR(a,b,xorRes);
    xor2  secondXOR(xorRes,cin,s);

    maj   carryComp(cout, a, b, cin);
endmodule

module maj(y, a, b, c);
	output y;
	input a;
	input b;
	input c;

	wire ab_bar;
	wire ac_bar;
	wire bc_bar;

	nand2 abnand(ab_bar, a, b);
	nand2 acnand(ac_bar, a, c);
	nand2 bcnand(bc_bar, b, c);
	nand3 lastnand(y, ab_bar, ac_bar, bc_bar);
endmodule

module fourtwo_x(cout, s, carry, a, b, c, d, cin);
    output cout;
    output s;
    output carry;
    input a;
    input b;
    input c;
    input d;
    input cin;

    wire intermediate;

    fullAdd_x firstCSA(cout,intermediate,a,b,c);
    fullAdd_x secondCSA(carry,s,cin,d,intermediate);
endmodule



module inverter(egress, in);
    output egress;
    input in;

    supply0 gnd;
    supply1 vdd;

    tranif1 nmos1(egress, gnd, in);
    tranif0 pmos1(egress, vdd, in);

endmodule

module buffer(egress, in);
    output egress;
    input in;

    inverter inv1 (int_a, in);
    inverter inv2 (egress, int_a);

endmodule

module bmux2(egress, s, s_b, in_d0, in_d1);
// mux2 CCC
       output egress;
       input s;
       input in_d0;
       input in_d1;
       input s_b;

       wire a, b, c, d;

       supply0 gnd;
       supply1 vdd;

       // pull down
       tranif1 nmos1(a_ccc, gnd, in_d0);
       tranif1 nmos2(egress, a_ccc, s_b);
       tranif1 nmos3(b_ccc, gnd, in_d1);
       tranif1 nmos4(egress, b_ccc, s);

       // pull up
       tranif0 pmos1(c_ccc, vdd, in_d0);
       tranif0 pmos2(egress, c_ccc, s);
       tranif0 pmos3(d_ccc, vdd, in_d1);
       tranif0 pmos4(egress, d_ccc, s_b);

endmodule

module mux2(s, s_b, d0, d1, outpt);
       input s;
       input s_b;
       input d0;
       input d1;
       output outpt;

        wire y_b;

        bmux2 mux(y_b, s, s_b, d0, d1);
        inverter outptinv(outpt, y_b);

endmodule

module subxor(egress,in1,in1_b,in2,in2_b);
// xor CCC
       output egress;
       input in1;
       input in1_b;
       input in2;
       input in2_b;

    wire wire1;
    wire wire2;
    wire wire3;

    supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(wire1_ccc,vdd,in1);
    tranif0 pmos2(egress,wire1_ccc,in1_b);
    tranif1 nmos1(egress,wire2_ccc,in1_b);
    tranif1 nmos2(wire2_ccc,gnd,in2_b);
    tranif0 pmos3(wire1_ccc, vdd,in2);
    tranif0 pmos4(egress, wire1_ccc,in2_b);
    tranif1 nmos3(egress, wire3_ccc,in1);
    tranif1 nmos4(wire3_ccc, gnd,in2);

endmodule

module xnor2(a,b,y);
       input a;
       input b;
       output y;

       wire a_b;
       wire b_b;


       inverter inva(a_b,a);
       inverter invb(b_b,b);

       subxor sub(y,a_b,a,b,b_b);

endmodule

module xor2(a,b,y);
       input a;
       input b;
       output y;

       wire a_b;
       wire b_b;


       inverter inva(a_b,a);
       inverter invb(b_b,b);

       subxor sub(y,a,a_b,b,b_b);

endmodule

module xor3(a,b,c,y);
		input a;
		input b;
		input c;
		output y;

		wire xorab;

		xor2	xorI(a,b,xorab);
		xor2	xorII(xorab,c,y);
endmodule

module nand2(egress,in1,in2);
// and2 CCC
    output egress;
    input in1;
    input in2;

    wire a;

     supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(egress,vdd,in2);
    tranif0 pmos2(egress,vdd,in1);
    tranif1 nmos1(egress,a_ccc,in1);
    tranif1 nmos2(a_ccc,gnd,in2);

endmodule

module nand3(egress,in1,in2,in3);

    output egress;
    input in1;
    input in2;
    input in3;

    wire a,b;

    supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(egress,vdd,in3);
    tranif0 pmos2(egress,vdd,in2);
    tranif0 pmos3(egress,vdd,in1);
    tranif1 nmos1(egress,a_ccc,in1);
    tranif1 nmos2(a_ccc,b_ccc,in2);
    tranif1 nmos3(b_ccc,gnd,in3);

endmodule

module and3(y,a,b,c);
    output y;
    input a;
    input b;
    input c;

    wire y_b;

    nand3 nand1(y_b,a,b,c);
    inverter inv1(y,y_b);
endmodule

module and2(y,a,b);
    output y;
    input a;
    input b;

    wire y_b;

    nand2 nand1(y_b,a,b);
    inverter inv1(y,y_b);
endmodule

module nor2(egress,in1,in2);
// or2 CCC
    output egress;
    input in1;
    input in2;

    wire a;

    supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(a_ccc,vdd,in1);
    tranif0 pmos2(egress,a_ccc,in2);
    tranif1 nmos1(egress,gnd,in2);
    tranif1 nmos2(egress,gnd,in1);

endmodule

module or2(y,a,b);
    output y;
    input a;
    input b;

    wire y_b;

    nor2 nor2_1(y_b,a,b);
    inverter inv1(y,y_b);

endmodule

module nor3(egress,in1,in2,in3);
// or2 CCC
    output egress;
    input in1;
    input in2;
    input in3;

    wire a;
    wire b;

     supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(a_ccc,vdd,in1);
    tranif0 pmos2(b_ccc,a_ccc,in2);
    tranif0 pmos3(egress,b_ccc,in3);
    tranif1 nmos1(egress,gnd,in1);
    tranif1 nmos2(egress,gnd,in2);
    tranif1 nmos3(egress,gnd,in3);

endmodule

module nand5(egress,in1,in2,in3,in4,in5);
// and5 CCC
    output egress;
    input in1;
    input in2;
    input in3;
    input in4;
    input in5;

    wire a,b,c,d;

    supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(egress,vdd,in5);
    tranif0 pmos2(egress,vdd,in4);
    tranif0 pmos3(egress,vdd,in3);
    tranif0 pmos4(egress,vdd,in2);
    tranif0 pmos5(egress,vdd,in1);
    tranif1 nmos1(egress,a_ccc,in1);
    tranif1 nmos2(a_ccc,b_ccc,in2);
    tranif1 nmos3(b_ccc,c_ccc,in3);
    tranif1 nmos4(c_ccc,d_ccc,in4);
    tranif1 nmos5(d_ccc,gnd,in5);

endmodule

module and5(y,a,b,c,d,e);
    output y;
    input a;
    input b;
    input c;
    input d;
    input e;

    wire y_b;

    nand5 ncolmn1(y_b,a,b,c,d,e);
    inverter inv1(y,y_b);

endmodule

module nand4(egress,in1,in2,in3,in4);
// and4CCC
    output egress;
    input in1;
    input in2;
    input in3;
    input in4;

    wire a,b,c;

    supply0 gnd;
    supply1 vdd;

    tranif0 pmos2(egress,vdd,in4);
    tranif0 pmos3(egress,vdd,in3);
    tranif0 pmos4(egress,vdd,in2);
    tranif0 pmos5(egress,vdd,in1);
    tranif1 nmos1(egress,a_ccc,in1);
    tranif1 nmos2(a_ccc,b_ccc,in2);
    tranif1 nmos3(b_ccc,c_ccc,in3);
    tranif1 nmos4(c_ccc,gnd,in4);

endmodule

module and4(y,a,b,c,d);
    output y;
    input a;
    input b;
    input c;
    input d;

    wire y_b;

    nand4 ncolmn1(y_b,a,b,c,d);
    inverter inv1(y,y_b);

endmodule

module oai(egress,in1,in2,in3);
    output egress;
    input in1;
    input in2;
    input in3;

    wire a,b;

    supply0 gnd;
    supply1 vdd;

    tranif1 nmos1(a_ccc,gnd,in1);
    tranif1 nmos2(gnd,a_ccc,in2);
    tranif1 nmos3(a_ccc,egress,in3);
    tranif0 pmos1(vdd,b_ccc,in1);
    tranif0 pmos2(b_ccc,egress,in2);
    tranif0 pmos3(egress,vdd,in3);

endmodule

module aoi(egress,in1,in2,in3);
    output egress;
    input in1;
    input in2;
    input in3;

    wire a,b;

    supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(a_ccc,vdd,in1);
    tranif0 pmos2(vdd,a_ccc,in2);
    tranif0 pmos3(a_ccc,egress,in3);
    tranif1 nmos1(gnd,b_ccc,in1);
    tranif1 nmos2(b_ccc,egress,in2);
    tranif1 nmos3(egress,gnd,in3);

endmodule

module min(egress,in1,in2,in3);
    output egress;
    input in1;
    input in2;
    input in3;

    wire ul;
    wire ur;
    wire lr;
    wire ll;

    supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(ul_ccc,vdd,in1);
    tranif0 pmos2(ul_ccc,vdd,in2);
    tranif0 pmos3(ur_ccc,vdd,in2);
    tranif0 pmos4(egress,ul_ccc,in3);
    tranif0 pmos5(egress,ur_ccc,in1);

    tranif1 nmos1(ll_ccc,gnd,in1);
    tranif1 nmos2(ll_ccc,gnd,in2);
    tranif1 nmos3(lr_ccc,gnd,in2);
    tranif1 nmos4(egress,ll_ccc,in3);
    tranif1 nmos5(egress,lr_ccc,in1);

endmodule

module sum_b(egress,in1,in2,in3,in4);
    output egress;
    input in1;
    input in2;
    input in3;
    input in4;

    wire ul;
    wire ur1;
    wire ur2;

    wire ll;
    wire lr1;
    wire lr2;

    supply0 gnd;
    supply1 vdd;

    tranif0 pmos1(vdd,ul_ccc,in1);
    tranif0 pmos2(vdd,ul_ccc,in2);
    tranif0 pmos3(vdd,ul_ccc,in3);
    tranif0 pmos4(vdd,ur1_ccc,in1);

    tranif0 pmos5(ur1_ccc,ur2_ccc,in2);
    tranif0 pmos6(ul_ccc,egress,in4);
    tranif0 pmos7(ur2_ccc,egress,in3);

    tranif1 nmos1(gnd,ll_ccc,in1);
    tranif1 nmos2(gnd,ll_ccc,in2);
    tranif1 nmos3(gnd,ll_ccc,in3);
    tranif1 nmos4(gnd,lr1_ccc,in1);

    tranif1 nmos5(lr1_ccc,lr2_ccc,in2);
    tranif1 nmos6(ll_ccc,egress,in4);
    tranif1 nmos7(lr2_ccc,egress,in3);

endmodule

module fullAdd_i(cout_b,sum_b,a,b,c);
    output cout_b;
    output sum_b;
    input a;
    input b;
    input c;

    min carry(cout_b,a,b,c);
    sum_b sum(sum_b,a,b,c,cout_b);
endmodule

module fullAdd(cout,s,a,b,c);
    output cout;
    output s;
    input a;
    input b;
    input c;

    wire cout_b;
    wire sum_b;

    fullAdd_i adder(cout_b,sum_b,a,b,c);
    inverter cout_i(cout,cout_b);
    inverter sum_i(s,sum_b);
endmodule
